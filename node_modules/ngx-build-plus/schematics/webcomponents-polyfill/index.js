"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const path = require("path");
const spawn = require('cross-spawn');
const scriptsIndexHtml = `
`;
const scriptsPolyfills = `
import '@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js';

if (!window['customElements']) {
  const script = document.createElement('script');
  script.src = './assets/webcomponentsjs/bundles/webcomponents-sd-ce.js';
  document.writeln(script.outerHTML);
}
`;
function npmInstall(options) {
    return function (tree, context) {
        spawn.sync('npm', ['install', options.package, options.switch], { stdio: 'inherit' });
        return tree;
    };
}
function npmRun(options) {
    return function (tree, context) {
        spawn.sync('npm', ['run', options.script], { stdio: 'inherit' });
        return tree;
    };
}
exports.npmRun = npmRun;
function executeNodeScript(options) {
    const scriptName = options.script;
    return (tree, _context) => {
        spawn.sync('node', [scriptName], { stdio: 'inherit' });
    };
}
exports.executeNodeScript = executeNodeScript;
function addWebComponentsPolyfill(_options) {
    return (tree, _context) => {
        const project = getProject(tree, _options);
        const relProjectRootPath = project.root.replace(/[^\/]+/g, '..') || '';
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign({}, _options, { relProjectRootPath, projectRoot: project.root || '' })),
            schematics_1.move(project.root || '/')
        ]);
        const rule = schematics_1.chain([
            updateIndexHtml(_options),
            updatePolyfills(_options),
            updatePackageJson(project.root || '', _options),
            schematics_1.branchAndMerge(schematics_1.mergeWith(templateSource)),
        ]);
        const packageJson = loadPackageJson(tree);
        if (!packageJson['dependencies'] || !packageJson['dependencies']['@webcomponents/custom-elements']) {
            _context.addTask(new tasks_1.NodePackageInstallTask({
                packageName: '@webcomponents/custom-elements',
            }));
        }
        if (!packageJson['dependencies'] || !packageJson['dependencies']['@webcomponents/webcomponentsjs']) {
            _context.addTask(new tasks_1.NodePackageInstallTask({
                packageName: '@webcomponents/webcomponentsjs',
            }));
        }
        if ((!packageJson['dependencies'] || !packageJson['dependencies']['copy'])
            && (!packageJson['devDependencies'] || !packageJson['devDependencies']['copy'])) {
            const id = _context.addTask(new tasks_1.NodePackageInstallTask({
                packageName: 'copy',
            }));
            _context.addTask(new tasks_1.RunSchematicTask('npmRun', { script: 'npx-build-plus:copy-assets' }), [id]);
        }
        else {
            _context.addTask(new tasks_1.RunSchematicTask('npmRun', { script: 'npx-build-plus:copy-assets' }));
        }
        return rule(tree, _context);
    };
}
exports.addWebComponentsPolyfill = addWebComponentsPolyfill;
function updatePackageJson(path, _options) {
    return (tree, context) => {
        const config = loadPackageJson(tree);
        updateScripts(path, config, tree, _options);
        savePackageJson(config, tree);
        return tree;
    };
}
function updateIndexHtml(options) {
    return (tree, context) => {
        const project = getProject(tree, options);
        const fileName = `${project.sourceRoot}/index.html`;
        const indexHtml = tree.read(fileName);
        if (indexHtml === null)
            throw Error('could not read index.html');
        const contentAsString = indexHtml.toString('UTF-8');
        if (contentAsString.includes('native-shim.js')) {
            console.info('Seems like, webcomponent polyfills are already referenced by index.html');
            return;
        }
        const modifiedContent = contentAsString.replace('</body>', scriptsIndexHtml + '\n</body>');
        tree.overwrite(fileName, modifiedContent);
        return tree;
    };
}
function updatePolyfills(options) {
    return (tree, context) => {
        const project = getProject(tree, options);
        const fileName = `${project.sourceRoot}/polyfills.ts`;
        const polyfillsJs = tree.read(fileName);
        if (polyfillsJs === null)
            throw Error('could not read polyfills.ts');
        const contentAsString = polyfillsJs.toString('UTF-8');
        if (contentAsString.includes('webcomponents-loader.js')) {
            console.info('Seems like, webcomponents-loader is already referenced by polyfill.js');
            return;
        }
        const modifiedContent = contentAsString + '\n\n' + scriptsPolyfills;
        tree.overwrite(fileName, modifiedContent);
        return tree;
    };
}
function getProject(tree, options) {
    const workspace = config_1.getWorkspace(tree);
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    const project = workspace.projects[options.project];
    // compensate for lacking sourceRoot property
    // e. g. when project was migrated to ng7, sourceRoot is lacking
    if (!project.sourceRoot && !project.root) {
        project.sourceRoot = 'src';
    }
    else if (!project.sourceRoot) {
        project.sourceRoot = path.join(project.root, 'src');
    }
    return project;
}
function savePackageJson(config, tree) {
    const newContentAsString = JSON.stringify(config, null, 2) || '';
    tree.overwrite('package.json', newContentAsString);
}
function loadPackageJson(tree) {
    const pkg = tree.read('package.json');
    if (pkg === null)
        throw Error('could not read package.json');
    const contentAsString = pkg.toString('UTF-8');
    const config = JSON.parse(contentAsString);
    return config;
}
function updateScripts(path, config, tree, _options) {
    const script = `node ${path}copy-wc-polyfill.js`;
    if (!config['scripts']) {
        config.scripts = {};
    }
    let currentScript = config.scripts['npx-build-plus:copy-assets'];
    if (!currentScript) {
        currentScript = script;
    }
    else if (!currentScript.includes(script)) {
        currentScript += ' && ' + script;
    }
    config.scripts['npx-build-plus:copy-assets'] = currentScript;
}
//# sourceMappingURL=data:application/json;base64,