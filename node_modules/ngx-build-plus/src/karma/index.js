"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const build_angular_1 = require("@angular-devkit/build-angular");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const load_hook_1 = require("../ext/load-hook");
const operators_1 = require("rxjs/operators");
const webpackMerge = require('webpack-merge');
class PlusKarmaBuilder extends build_angular_1.KarmaBuilder {
    buildWebpackConfig(root, projectRoot, sourceRoot, host, options) {
        let config = super.buildWebpackConfig(root, projectRoot, sourceRoot, host, options);
        if (this.localOptions.singleBundle) {
            if (!this.localOptions.keepPolyfills) {
                delete config.entry.polyfills;
            }
            delete config.optimization.runtimeChunk;
            delete config.optimization.splitChunks;
        }
        if (this.localOptions.singleBundle && this.localOptions.bundleStyles !== false) {
            delete config.entry.styles;
        }
        if (this.localOptions.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(projectRoot), this.localOptions.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        let plugin = null;
        if (this.localOptions.plugin) {
            plugin = load_hook_1.loadHook(this.localOptions.plugin);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config);
        }
        if (this.localOptions.configHook) {
            const hook = load_hook_1.loadHook(this.localOptions.configHook);
            config = hook(config);
        }
        return config;
    }
    run(builderConfig) {
        this.localOptions = builderConfig.options;
        let plugin = null;
        if (builderConfig.options.plugin) {
            plugin = load_hook_1.loadHook(builderConfig.options.plugin);
        }
        if (plugin && plugin.pre) {
            plugin.pre(builderConfig);
        }
        return super.run(builderConfig).pipe(operators_1.tap(_ => {
            if (plugin && plugin.post) {
                plugin.post(builderConfig);
            }
        }));
    }
}
exports.default = PlusKarmaBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNyYy9rYXJtYS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlFQUEyRjtBQUMzRiwrQ0FBc0U7QUFDdEUsNkJBQTZCO0FBRzdCLGdEQUE0QztBQUU1Qyw4Q0FBcUM7QUFHckMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBVzlDLE1BQXFCLGdCQUFpQixTQUFRLDRCQUFZO0lBSXRELGtCQUFrQixDQUNkLElBQVUsRUFDVixXQUFpQixFQUNqQixVQUE0QixFQUM1QixJQUE4QixFQUM5QixPQUF5QztRQUd6QyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXBGLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUU7WUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO2dCQUNsQyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztZQUN4QyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksS0FBSyxLQUFLLEVBQUU7WUFDNUUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUM5QjtRQUVELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRTtZQUN0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFhLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2hHLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sR0FBRyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQztRQUNqQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQzFCLE1BQU0sR0FBRyxvQkFBUSxDQUFTLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkQ7UUFFRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRTtZQUM5QixNQUFNLElBQUksR0FBRyxvQkFBUSxDQUFlLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEUsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxHQUFHLENBQUMsYUFBa0I7UUFFbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQzFDLElBQUksTUFBTSxHQUFrQixJQUFJLENBQUM7UUFDakMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUM5QixNQUFNLEdBQUcsb0JBQVEsQ0FBUyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDaEMsZUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ0osSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUM5QjtRQUNMLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFFTixDQUFDO0NBQ0o7QUF0RUQsbUNBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2FybWFCdWlsZGVyLCBOb3JtYWxpemVkS2FybWFCdWlsZGVyU2NoZW1hIH0gZnJvbSBcIkBhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyXCI7XHJcbmltcG9ydCB7IFBhdGgsIGdldFN5c3RlbVBhdGgsIHZpcnR1YWxGcyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBDb25maWdIb29rRm4sIFBsdWdpbiB9IGZyb20gJy4uL2V4dC9ob29rJztcclxuaW1wb3J0IHsgbG9hZEhvb2sgfSBmcm9tICcuLi9leHQvbG9hZC1ob29rJztcclxuaW1wb3J0IHsgQnVpbGRFdmVudCB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3QnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmNvbnN0IHdlYnBhY2tNZXJnZSA9IHJlcXVpcmUoJ3dlYnBhY2stbWVyZ2UnKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGx1c05vcm1hbGl6ZWRLYXJtYUJ1aWxkZXJTY2hlbWEgZXh0ZW5kcyBOb3JtYWxpemVkS2FybWFCdWlsZGVyU2NoZW1hIHtcclxuICAgIGV4dHJhV2VicGFja0NvbmZpZzogc3RyaW5nO1xyXG4gICAgc2luZ2xlQnVuZGxlOiBib29sZWFuO1xyXG4gICAga2VlcFBvbHlmaWxsczogYm9vbGVhbjtcclxuICAgIGJ1bmRsZVN0eWxlczogYm9vbGVhbjtcclxuICAgIGNvbmZpZ0hvb2s6IHN0cmluZztcclxuICAgIHBsdWdpbjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbHVzS2FybWFCdWlsZGVyIGV4dGVuZHMgS2FybWFCdWlsZGVyIHtcclxuXHJcbiAgICBwcml2YXRlIGxvY2FsT3B0aW9uczogYW55O1xyXG5cclxuICAgIGJ1aWxkV2VicGFja0NvbmZpZyhcclxuICAgICAgICByb290OiBQYXRoLFxyXG4gICAgICAgIHByb2plY3RSb290OiBQYXRoLFxyXG4gICAgICAgIHNvdXJjZVJvb3Q6IFBhdGggfCB1bmRlZmluZWQsXHJcbiAgICAgICAgaG9zdDogdmlydHVhbEZzLkhvc3Q8ZnMuU3RhdHM+LFxyXG4gICAgICAgIG9wdGlvbnM6IFBsdXNOb3JtYWxpemVkS2FybWFCdWlsZGVyU2NoZW1hLFxyXG4gICAgKSB7XHJcblxyXG4gICAgICAgIGxldCBjb25maWcgPSBzdXBlci5idWlsZFdlYnBhY2tDb25maWcocm9vdCwgcHJvamVjdFJvb3QsIHNvdXJjZVJvb3QsIGhvc3QsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5sb2NhbE9wdGlvbnMuc2luZ2xlQnVuZGxlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5sb2NhbE9wdGlvbnMua2VlcFBvbHlmaWxscykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeS5wb2x5ZmlsbHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5vcHRpbWl6YXRpb24ucnVudGltZUNodW5rO1xyXG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLm9wdGltaXphdGlvbi5zcGxpdENodW5rcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5zaW5nbGVCdW5kbGUgJiYgdGhpcy5sb2NhbE9wdGlvbnMuYnVuZGxlU3R5bGVzICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLmVudHJ5LnN0eWxlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5leHRyYVdlYnBhY2tDb25maWcpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUoZ2V0U3lzdGVtUGF0aChwcm9qZWN0Um9vdCksIHRoaXMubG9jYWxPcHRpb25zLmV4dHJhV2VicGFja0NvbmZpZyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxDb25maWcgPSByZXF1aXJlKGZpbGVQYXRoKTtcclxuICAgICAgICAgICAgY29uZmlnID0gd2VicGFja01lcmdlKFtjb25maWcsIGFkZGl0aW9uYWxDb25maWddKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwbHVnaW46IFBsdWdpbiB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5wbHVnaW4pIHtcclxuICAgICAgICAgICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPih0aGlzLmxvY2FsT3B0aW9ucy5wbHVnaW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBsdWdpbiAmJiBwbHVnaW4uY29uZmlnKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZyA9IHBsdWdpbi5jb25maWcoY29uZmlnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5jb25maWdIb29rKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvb2sgPSBsb2FkSG9vazxDb25maWdIb29rRm4+KHRoaXMubG9jYWxPcHRpb25zLmNvbmZpZ0hvb2spO1xyXG4gICAgICAgICAgICBjb25maWcgPSBob29rKGNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIHJ1bihidWlsZGVyQ29uZmlnOiBhbnkpOiBPYnNlcnZhYmxlPEJ1aWxkRXZlbnQ+IHtcclxuXHJcbiAgICAgICAgdGhpcy5sb2NhbE9wdGlvbnMgPSBidWlsZGVyQ29uZmlnLm9wdGlvbnM7XHJcbiAgICAgICAgbGV0IHBsdWdpbjogUGx1Z2luIHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGJ1aWxkZXJDb25maWcub3B0aW9ucy5wbHVnaW4pIHtcclxuICAgICAgICAgICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPihidWlsZGVyQ29uZmlnLm9wdGlvbnMucGx1Z2luKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLnByZSkge1xyXG4gICAgICAgICAgICBwbHVnaW4ucHJlKGJ1aWxkZXJDb25maWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLnJ1bihidWlsZGVyQ29uZmlnKS5waXBlKFxyXG4gICAgICAgICAgICB0YXAoXyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5wb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLnBvc3QoYnVpbGRlckNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICB9XHJcbn0iXX0=