"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const build_angular_1 = require("@angular-devkit/build-angular");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const operators_1 = require("rxjs/operators");
const load_hook_1 = require("../ext/load-hook");
const stats_1 = require("../stats");
const webpackMerge = require('webpack-merge');
class PlusBuilder extends build_angular_1.BrowserBuilder {
    createLoggingFactory() {
        return (verbose) => (stats, config, logger) => {
            // config.stats contains our own stats settings, added during buildWebpackConfig().
            const json = stats.toJson(config.stats);
            if (verbose) {
                logger.info(stats.toString(config.stats));
            }
            else {
                logger.info(stats_1.statsToString(json, config.stats));
            }
            if (stats.hasWarnings()) {
                logger.warn(stats_1.statsWarningsToString(json, config.stats));
            }
            if (stats.hasErrors()) {
                logger.error(stats_1.statsErrorsToString(json, config.stats));
            }
        };
    }
    buildWebpackConfig(root, projectRoot, host, options) {
        let config = super.buildWebpackConfig(root, projectRoot, host, options);
        if (this.localOptions.singleBundle) {
            if (!this.localOptions.keepPolyfills) {
                delete config.entry.polyfills;
            }
            delete config.optimization.runtimeChunk;
            delete config.optimization.splitChunks;
        }
        if (this.localOptions.singleBundle && this.localOptions.bundleStyles !== false) {
            delete config.entry.styles;
        }
        if (this.localOptions.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(projectRoot), this.localOptions.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        let plugin = null;
        if (this.localOptions.plugin) {
            plugin = load_hook_1.loadHook(this.localOptions.plugin);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config);
        }
        if (this.localOptions.configHook) {
            const hook = load_hook_1.loadHook(this.localOptions.configHook);
            config = hook(config);
        }
        return config;
    }
    run(builderConfig) {
        this.localOptions = builderConfig.options;
        let plugin = null;
        if (builderConfig.options.plugin) {
            plugin = load_hook_1.loadHook(builderConfig.options.plugin);
        }
        if (plugin && plugin.pre) {
            plugin.pre(builderConfig);
        }
        return super.run(builderConfig).pipe(operators_1.tap(_ => {
            if (plugin && plugin.post) {
                plugin.post(builderConfig);
            }
        }));
    }
}
exports.PlusBuilder = PlusBuilder;
exports.default = PlusBuilder;
//# sourceMappingURL=data:application/json;base64,