"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const path = require("path");
const load_hook_1 = require("../ext/load-hook");
const build_angular_1 = require("@angular-devkit/build-angular");
const operators_1 = require("rxjs/operators");
const webpackMerge = require('webpack-merge');
class PlusDevServerBuilder extends build_angular_1.DevServerBuilder {
    buildWebpackConfig(root, projectRoot, host, options) {
        let config = super.buildWebpackConfig(root, projectRoot, host, options);
        if (this.localOptions.singleBundle) {
            if (!this.localOptions.keepPolyfills) {
                delete config.entry.polyfills;
            }
            delete config.optimization.runtimeChunk;
            delete config.optimization.splitChunks;
        }
        if (this.localOptions.singleBundle && this.localOptions.bundleStyles !== false) {
            delete config.entry.styles;
        }
        if (this.localOptions.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(projectRoot), this.localOptions.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        let plugin = null;
        if (this.localOptions.plugin) {
            plugin = load_hook_1.loadHook(this.localOptions.plugin);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config);
        }
        if (this.localOptions.configHook) {
            const hook = load_hook_1.loadHook(this.localOptions.configHook);
            config = hook(config);
        }
        if (options.verbose) {
            console.debug('modified webpack config', config);
        }
        return config;
    }
    run(builderConfig) {
        this.localOptions = builderConfig.options;
        let plugin = null;
        if (builderConfig.options.plugin) {
            plugin = load_hook_1.loadHook(builderConfig.options.plugin);
        }
        if (plugin && plugin.pre) {
            plugin.pre(builderConfig);
        }
        return super.run(builderConfig).pipe(operators_1.tap(_ => {
            if (plugin && plugin.post) {
                plugin.post(builderConfig);
            }
        }));
    }
}
exports.PlusDevServerBuilder = PlusDevServerBuilder;
exports.default = PlusDevServerBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInNyYy9wbHVzLWRldi1zZXJ2ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBc0U7QUFDdEUsNkJBQTZCO0FBRzdCLGdEQUE0QztBQUU1QyxpRUFBc0s7QUFHdEssOENBQXFDO0FBR3JDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQVc5QyxNQUFhLG9CQUFxQixTQUFRLGdDQUFvQjtJQUk1RCxrQkFBa0IsQ0FDaEIsSUFBVSxFQUNWLFdBQWlCLEVBQ2pCLElBQThCLEVBQzlCLE9BQVk7UUFHWixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFeEUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRTtZQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3BDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7YUFDL0I7WUFDRCxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO1lBQ3hDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7U0FDeEM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxLQUFLLEtBQUssRUFBRTtZQUM5RSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1NBQzVCO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFFO1lBQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDaEcsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0MsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLE1BQU0sR0FBa0IsSUFBSSxDQUFDO1FBQ2pDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDNUIsTUFBTSxHQUFHLG9CQUFRLENBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyRDtRQUVELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDM0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxHQUFHLG9CQUFRLENBQWUsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsRSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO1FBRUQsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEQ7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsR0FBRyxDQUFDLGFBQWtCO1FBRXBCLElBQUksQ0FBQyxZQUFZLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUMxQyxJQUFJLE1BQU0sR0FBa0IsSUFBSSxDQUFDO1FBQ2pDLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDaEMsTUFBTSxHQUFHLG9CQUFRLENBQVMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6RDtRQUVELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzQjtRQUVELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQ2xDLGVBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNOLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUosQ0FBQztDQUdGO0FBM0VELG9EQTJFQztBQUVELGtCQUFlLG9CQUFvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aCwgZ2V0U3lzdGVtUGF0aCwgdmlydHVhbEZzIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCB7IENvbmZpZ0hvb2tGbiwgUGx1Z2luIH0gZnJvbSAnLi4vZXh0L2hvb2snO1xyXG5pbXBvcnQgeyBsb2FkSG9vayB9IGZyb20gJy4uL2V4dC9sb2FkLWhvb2snO1xyXG5cclxuaW1wb3J0IHsgRGV2U2VydmVyQnVpbGRlciBhcyBEZXZTZXJ2ZXJCdWlsZGVyQmFzZSwgQnJvd3NlckJ1aWxkZXJTY2hlbWEgYXMgQnJvd3NlckJ1aWxkZXJTY2hlbWFCYXNlLCBEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyAgIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXInO1xyXG5pbXBvcnQgeyBCdWlsZEV2ZW50IH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XHJcblxyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmNvbnN0IHdlYnBhY2tNZXJnZSA9IHJlcXVpcmUoJ3dlYnBhY2stbWVyZ2UnKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnJvd3NlckJ1aWxkZXJTY2hlbWEgZXh0ZW5kcyBCcm93c2VyQnVpbGRlclNjaGVtYUJhc2Uge1xyXG4gIGV4dHJhV2VicGFja0NvbmZpZzogc3RyaW5nO1xyXG4gIHNpbmdsZUJ1bmRsZTogYm9vbGVhbjtcclxuICBrZWVwUG9seWZpbGxzOiBib29sZWFuO1xyXG4gIGJ1bmRsZVN0eWxlczogYm9vbGVhbjtcclxuICBjb25maWdIb29rOiBzdHJpbmc7XHJcbiAgcGx1Z2luOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQbHVzRGV2U2VydmVyQnVpbGRlciBleHRlbmRzIERldlNlcnZlckJ1aWxkZXJCYXNlIHtcclxuXHJcbiAgcHJpdmF0ZSBsb2NhbE9wdGlvbnM6IGFueTtcclxuXHJcbiAgYnVpbGRXZWJwYWNrQ29uZmlnKFxyXG4gICAgcm9vdDogUGF0aCxcclxuICAgIHByb2plY3RSb290OiBQYXRoLFxyXG4gICAgaG9zdDogdmlydHVhbEZzLkhvc3Q8ZnMuU3RhdHM+LFxyXG4gICAgb3B0aW9uczogYW55LFxyXG4gICkge1xyXG5cclxuICAgIGxldCBjb25maWcgPSBzdXBlci5idWlsZFdlYnBhY2tDb25maWcocm9vdCwgcHJvamVjdFJvb3QsIGhvc3QsIG9wdGlvbnMpO1xyXG5cclxuICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5zaW5nbGVCdW5kbGUpIHtcclxuICAgICAgaWYgKCF0aGlzLmxvY2FsT3B0aW9ucy5rZWVwUG9seWZpbGxzKSB7XHJcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5lbnRyeS5wb2x5ZmlsbHM7XHJcbiAgICAgIH0gXHJcbiAgICAgIGRlbGV0ZSBjb25maWcub3B0aW1pemF0aW9uLnJ1bnRpbWVDaHVuaztcclxuICAgICAgZGVsZXRlIGNvbmZpZy5vcHRpbWl6YXRpb24uc3BsaXRDaHVua3M7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubG9jYWxPcHRpb25zLnNpbmdsZUJ1bmRsZSAmJiB0aGlzLmxvY2FsT3B0aW9ucy5idW5kbGVTdHlsZXMgIT09IGZhbHNlKSB7XHJcbiAgICAgIGRlbGV0ZSBjb25maWcuZW50cnkuc3R5bGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5leHRyYVdlYnBhY2tDb25maWcpIHtcclxuICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUoZ2V0U3lzdGVtUGF0aChwcm9qZWN0Um9vdCksIHRoaXMubG9jYWxPcHRpb25zLmV4dHJhV2VicGFja0NvbmZpZyk7XHJcbiAgICAgIGNvbnN0IGFkZGl0aW9uYWxDb25maWcgPSByZXF1aXJlKGZpbGVQYXRoKTtcclxuICAgICAgY29uZmlnID0gd2VicGFja01lcmdlKFtjb25maWcsIGFkZGl0aW9uYWxDb25maWddKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGx1Z2luOiBQbHVnaW4gfCBudWxsID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmxvY2FsT3B0aW9ucy5wbHVnaW4pIHtcclxuICAgICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPih0aGlzLmxvY2FsT3B0aW9ucy5wbHVnaW4pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwbHVnaW4gJiYgcGx1Z2luLmNvbmZpZykge1xyXG4gICAgICBjb25maWcgPSBwbHVnaW4uY29uZmlnKGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubG9jYWxPcHRpb25zLmNvbmZpZ0hvb2spIHtcclxuICAgICAgY29uc3QgaG9vayA9IGxvYWRIb29rPENvbmZpZ0hvb2tGbj4odGhpcy5sb2NhbE9wdGlvbnMuY29uZmlnSG9vayk7XHJcbiAgICAgIGNvbmZpZyA9IGhvb2soY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAob3B0aW9ucy52ZXJib3NlKSB7XHJcbiAgICAgIGNvbnNvbGUuZGVidWcoJ21vZGlmaWVkIHdlYnBhY2sgY29uZmlnJywgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgcnVuKGJ1aWxkZXJDb25maWc6IGFueSk6IE9ic2VydmFibGU8QnVpbGRFdmVudD4ge1xyXG4gICAgXHJcbiAgICB0aGlzLmxvY2FsT3B0aW9ucyA9IGJ1aWxkZXJDb25maWcub3B0aW9ucztcclxuICAgIGxldCBwbHVnaW46IFBsdWdpbiB8IG51bGwgPSBudWxsO1xyXG4gICAgaWYgKGJ1aWxkZXJDb25maWcub3B0aW9ucy5wbHVnaW4pIHtcclxuICAgICAgcGx1Z2luID0gbG9hZEhvb2s8UGx1Z2luPihidWlsZGVyQ29uZmlnLm9wdGlvbnMucGx1Z2luKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5wcmUpIHtcclxuICAgICAgcGx1Z2luLnByZShidWlsZGVyQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3VwZXIucnVuKGJ1aWxkZXJDb25maWcpLnBpcGUoXHJcbiAgICAgIHRhcChfID0+IHtcclxuICAgICAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5wb3N0KSB7XHJcbiAgICAgICAgICBwbHVnaW4ucG9zdChidWlsZGVyQ29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICB9XHJcblxyXG4gIFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbHVzRGV2U2VydmVyQnVpbGRlcjtcclxuIl19