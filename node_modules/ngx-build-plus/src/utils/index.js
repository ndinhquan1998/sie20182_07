"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const load_hook_1 = require("../ext/load-hook");
const core_1 = require("@angular-devkit/core");
const path = require("path");
const webpackMerge = require("webpack-merge");
function runBuilderHandler(options, transforms, context, builderHandler, configTransformerName = 'config') {
    let plugin = null;
    if (options.plugin) {
        plugin = load_hook_1.loadHook(options.plugin);
    }
    setupConfigHook(transforms, options, context, plugin, configTransformerName);
    if (plugin && plugin.pre) {
        plugin.pre(options);
    }
    const result = asObservable(builderHandler(options, context, transforms));
    return result.pipe(operators_1.tap(_ => {
        if (plugin && plugin.post) {
            plugin.post(options);
        }
    }));
}
exports.runBuilderHandler = runBuilderHandler;
function asObservable(result) {
    if (rxjs_1.isObservable(result)) {
        return result;
    }
    if (result instanceof Promise) {
        return rxjs_1.from(result);
    }
    return rxjs_1.of(result);
}
function setupConfigHook(transforms, options, context, plugin, configTransformerName = 'config') {
    const originalConfigFn = transforms[configTransformerName];
    transforms[configTransformerName] = (workspace, config) => {
        if (options.singleBundle) {
            if (!options.keepPolyfills && config.entry && config.entry['polyfills']) {
                delete config.entry['polyfills'];
            }
            if (config.optimization) {
                delete config.optimization.runtimeChunk;
                delete config.optimization.splitChunks;
            }
        }
        if (options.singleBundle && options.bundleStyles !== false && config.entry && config.entry['styles']) {
            delete config.entry['styles'];
        }
        if (options.extraWebpackConfig) {
            const filePath = path.resolve(core_1.getSystemPath(core_1.normalize(context.workspaceRoot)), options.extraWebpackConfig);
            const additionalConfig = require(filePath);
            config = webpackMerge([config, additionalConfig]);
        }
        if (plugin && plugin.config) {
            config = plugin.config(config);
        }
        if (options.configHook) {
            const hook = load_hook_1.loadHook(options.configHook);
            config = hook(config);
        }
        if (originalConfigFn) {
            return originalConfigFn(workspace, config);
        }
        else {
            return rxjs_1.of(config);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,