/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from "@angular/core";
import { extractDeepPropertyByMapKey, extractDeepPropertyByParentMapKey, isBoolean, isNumberFinite, isString, isUndefined, } from "../helpers/helpers";
export class FilterByPipe {
    /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    transform(input, props, search = "", strict = false) {
        if (!Array.isArray(input) ||
            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        const /** @type {?} */ terms = String(search)
            .toLowerCase()
            .split(",");
        return input.filter(obj => {
            return props.some(prop => {
                return terms.some(term => {
                    const /** @type {?} */ value = extractDeepPropertyByMapKey(obj, prop);
                    const { props, tail } = extractDeepPropertyByParentMapKey(obj, prop);
                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                        return props.some(parent => {
                            const /** @type {?} */ str = String(parent[tail]).toLowerCase();
                            return strict ? str === term : !!~str.indexOf(term);
                        });
                    }
                    if (isUndefined(value)) {
                        return false;
                    }
                    const /** @type {?} */ strValue = String(value).toLowerCase();
                    return strict ? term === strValue : !!~strValue.indexOf(term);
                });
            });
        });
    }
}
FilterByPipe.decorators = [
    { type: Pipe, args: [{ name: "filterBy" },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL3BpcGVzL2FycmF5L2ZpbHRlci1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUNMLDJCQUEyQixFQUMzQixpQ0FBaUMsRUFDakMsU0FBUyxFQUNULGNBQWMsRUFDZCxRQUFRLEVBQ1IsV0FBVyxHQUNaLE1BQU0sb0JBQW9CLENBQUM7QUFJNUIsTUFBTTs7Ozs7Ozs7SUFHSixTQUFTLENBQUMsS0FBVSxFQUFFLEtBQW9CLEVBQUUsU0FBYyxFQUFFLEVBQUUsU0FBa0IsS0FBSztRQUNuRixFQUFFLENBQUMsQ0FDRCxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUMvRixDQUFDLENBQUMsQ0FBQztZQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDZDtRQUVELHVCQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ3pCLFdBQVcsRUFBRTthQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVkLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN2QixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDdkIsdUJBQU0sS0FBSyxHQUFHLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDckQsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxpQ0FBaUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBRXJFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDdEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7NEJBQ3pCLHVCQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7NEJBRS9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQ3JELENBQUMsQ0FBQztxQkFDSjtvQkFFRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN2QixNQUFNLENBQUMsS0FBSyxDQUFDO3FCQUNkO29CQUVELHVCQUFNLFFBQVEsR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7b0JBRXJELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQy9ELENBQUMsQ0FBQzthQUNKLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQztLQUNKOzs7WUF4Q0YsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtcbiAgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5LFxuICBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXksXG4gIGlzQm9vbGVhbixcbiAgaXNOdW1iZXJGaW5pdGUsXG4gIGlzU3RyaW5nLFxuICBpc1VuZGVmaW5lZCxcbn0gZnJvbSBcIi4uL2hlbHBlcnMvaGVscGVyc1wiO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZSBuby1iaXR3aXNlXG5AUGlwZSh7IG5hbWU6IFwiZmlsdGVyQnlcIiB9KVxuZXhwb3J0IGNsYXNzIEZpbHRlckJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoPzogYW55LCBzdHJpY3Q/OiBib29sZWFuKTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaD86IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IFQ7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoOiBhbnkgPSBcIlwiLCBzdHJpY3Q6IGJvb2xlYW4gPSBmYWxzZSk6IGFueSB7XG4gICAgaWYgKFxuICAgICAgIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8XG4gICAgICAoIUFycmF5LmlzQXJyYXkoc2VhcmNoKSAmJiAhaXNTdHJpbmcoc2VhcmNoKSAmJiAhaXNOdW1iZXJGaW5pdGUoc2VhcmNoKSAmJiAhaXNCb29sZWFuKHNlYXJjaCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3QgdGVybXMgPSBTdHJpbmcoc2VhcmNoKVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5zcGxpdChcIixcIik7XG5cbiAgICByZXR1cm4gaW5wdXQuZmlsdGVyKG9iaiA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuc29tZShwcm9wID0+IHtcbiAgICAgICAgcmV0dXJuIHRlcm1zLnNvbWUodGVybSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqLCBwcm9wKTtcbiAgICAgICAgICBjb25zdCB7IHByb3BzLCB0YWlsIH0gPSBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXkob2JqLCBwcm9wKTtcblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkgJiYgIWlzVW5kZWZpbmVkKHByb3BzKSAmJiBBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzLnNvbWUocGFyZW50ID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RyID0gU3RyaW5nKHBhcmVudFt0YWlsXSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0ID8gc3RyID09PSB0ZXJtIDogISF+c3RyLmluZGV4T2YodGVybSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgc3RyVmFsdWU6IHN0cmluZyA9IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgIHJldHVybiBzdHJpY3QgPyB0ZXJtID09PSBzdHJWYWx1ZSA6ICEhfnN0clZhbHVlLmluZGV4T2YodGVybSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==