/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from "@angular/core";
import { AorAnPipe } from "./a-or-an";
import { UcWordsPipe } from "./ucwords";
import { LeftTrimPipe } from "./ltrim";
import { RepeatPipe } from "./repeat";
import { RightTrimPipe } from "./rtrim";
import { ScanPipe } from "./scan";
import { ShortenPipe } from "./shorten";
import { StripTagsPipe } from "./strip-tags";
import { TrimPipe } from "./trim";
import { UcFirstPipe } from "./ucfirst";
import { SlugifyPipe } from "./slugify";
import { CamelizePipe } from "./camelize";
import { LatinisePipe } from "./latinise";
import { LinesPipe } from "./lines";
import { UnderscorePipe } from "./underscore";
import { MatchPipe } from "./match";
import { TestPipe } from "./test";
import { LeftPadPipe } from "./lpad";
import { RightPadPipe } from "./rpad";
import { MakePluralStringPipe } from "./pluralize";
import { WrapPipe } from "./wrap";
export var /** @type {?} */ STRING_PIPES = [
    AorAnPipe,
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    MakePluralStringPipe,
    WrapPipe,
];
var NgStringPipesModule = /** @class */ (function () {
    function NgStringPipesModule() {
    }
    NgStringPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: STRING_PIPES,
                    imports: [],
                    exports: STRING_PIPES,
                },] },
    ];
    return NgStringPipesModule;
}());
export { NgStringPipesModule };
export { AorAnPipe } from "./a-or-an";
export { UcWordsPipe } from "./ucwords";
export { LeftTrimPipe } from "./ltrim";
export { RepeatPipe } from "./repeat";
export { RightTrimPipe } from "./rtrim";
export { ScanPipe } from "./scan";
export { ShortenPipe } from "./shorten";
export { StripTagsPipe } from "./strip-tags";
export { TrimPipe } from "./trim";
export { UcFirstPipe } from "./ucfirst";
export { SlugifyPipe } from "./slugify";
export { CamelizePipe } from "./camelize";
export { LatinisePipe } from "./latinise";
export { LinesPipe } from "./lines";
export { UnderscorePipe } from "./underscore";
export { MatchPipe } from "./match";
export { TestPipe } from "./test";
export { LeftPadPipe } from "./lpad";
export { RightPadPipe } from "./rpad";
export { MakePluralStringPipe } from "./pluralize";
export { WrapPipe } from "./wrap";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsTUFBTSxDQUFDLHFCQUFNLFlBQVksR0FBRztJQUMxQixTQUFTO0lBQ1QsWUFBWTtJQUNaLFVBQVU7SUFDVixhQUFhO0lBQ2IsUUFBUTtJQUNSLFdBQVc7SUFDWCxhQUFhO0lBQ2IsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFlBQVk7SUFDWixZQUFZO0lBQ1osU0FBUztJQUNULGNBQWM7SUFDZCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxZQUFZO0lBQ1osb0JBQW9CO0lBQ3BCLFFBQVE7Q0FDVCxDQUFDOzs7OztnQkFFRCxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLFlBQVk7b0JBQzFCLE9BQU8sRUFBRSxFQUFFO29CQUNYLE9BQU8sRUFBRSxZQUFZO2lCQUN0Qjs7OEJBbkREOztTQW9EYSxtQkFBbUI7QUFFaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEFvckFuUGlwZSB9IGZyb20gXCIuL2Etb3ItYW5cIjtcbmltcG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSBcIi4vdWN3b3Jkc1wiO1xuaW1wb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSBcIi4vbHRyaW1cIjtcbmltcG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tIFwiLi9yZXBlYXRcIjtcbmltcG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tIFwiLi9ydHJpbVwiO1xuaW1wb3J0IHsgU2NhblBpcGUgfSBmcm9tIFwiLi9zY2FuXCI7XG5pbXBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gXCIuL3Nob3J0ZW5cIjtcbmltcG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tIFwiLi9zdHJpcC10YWdzXCI7XG5pbXBvcnQgeyBUcmltUGlwZSB9IGZyb20gXCIuL3RyaW1cIjtcbmltcG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSBcIi4vdWNmaXJzdFwiO1xuaW1wb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tIFwiLi9zbHVnaWZ5XCI7XG5pbXBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tIFwiLi9jYW1lbGl6ZVwiO1xuaW1wb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSBcIi4vbGF0aW5pc2VcIjtcbmltcG9ydCB7IExpbmVzUGlwZSB9IGZyb20gXCIuL2xpbmVzXCI7XG5pbXBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gXCIuL3VuZGVyc2NvcmVcIjtcbmltcG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gXCIuL21hdGNoXCI7XG5pbXBvcnQgeyBUZXN0UGlwZSB9IGZyb20gXCIuL3Rlc3RcIjtcbmltcG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSBcIi4vbHBhZFwiO1xuaW1wb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSBcIi4vcnBhZFwiO1xuaW1wb3J0IHsgTWFrZVBsdXJhbFN0cmluZ1BpcGUgfSBmcm9tIFwiLi9wbHVyYWxpemVcIjtcbmltcG9ydCB7IFdyYXBQaXBlIH0gZnJvbSBcIi4vd3JhcFwiO1xuXG5leHBvcnQgY29uc3QgU1RSSU5HX1BJUEVTID0gW1xuICBBb3JBblBpcGUsXG4gIExlZnRUcmltUGlwZSxcbiAgUmVwZWF0UGlwZSxcbiAgUmlnaHRUcmltUGlwZSxcbiAgU2NhblBpcGUsXG4gIFNob3J0ZW5QaXBlLFxuICBTdHJpcFRhZ3NQaXBlLFxuICBUcmltUGlwZSxcbiAgVWNGaXJzdFBpcGUsXG4gIFVjV29yZHNQaXBlLFxuICBTbHVnaWZ5UGlwZSxcbiAgQ2FtZWxpemVQaXBlLFxuICBMYXRpbmlzZVBpcGUsXG4gIExpbmVzUGlwZSxcbiAgVW5kZXJzY29yZVBpcGUsXG4gIE1hdGNoUGlwZSxcbiAgVGVzdFBpcGUsXG4gIExlZnRQYWRQaXBlLFxuICBSaWdodFBhZFBpcGUsXG4gIE1ha2VQbHVyYWxTdHJpbmdQaXBlLFxuICBXcmFwUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogU1RSSU5HX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogU1RSSU5HX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1N0cmluZ1BpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IEFvckFuUGlwZSB9IGZyb20gXCIuL2Etb3ItYW5cIjtcbmV4cG9ydCB7IFVjV29yZHNQaXBlIH0gZnJvbSBcIi4vdWN3b3Jkc1wiO1xuZXhwb3J0IHsgTGVmdFRyaW1QaXBlIH0gZnJvbSBcIi4vbHRyaW1cIjtcbmV4cG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tIFwiLi9yZXBlYXRcIjtcbmV4cG9ydCB7IFJpZ2h0VHJpbVBpcGUgfSBmcm9tIFwiLi9ydHJpbVwiO1xuZXhwb3J0IHsgU2NhblBpcGUgfSBmcm9tIFwiLi9zY2FuXCI7XG5leHBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gXCIuL3Nob3J0ZW5cIjtcbmV4cG9ydCB7IFN0cmlwVGFnc1BpcGUgfSBmcm9tIFwiLi9zdHJpcC10YWdzXCI7XG5leHBvcnQgeyBUcmltUGlwZSB9IGZyb20gXCIuL3RyaW1cIjtcbmV4cG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSBcIi4vdWNmaXJzdFwiO1xuZXhwb3J0IHsgU2x1Z2lmeVBpcGUgfSBmcm9tIFwiLi9zbHVnaWZ5XCI7XG5leHBvcnQgeyBDYW1lbGl6ZVBpcGUgfSBmcm9tIFwiLi9jYW1lbGl6ZVwiO1xuZXhwb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSBcIi4vbGF0aW5pc2VcIjtcbmV4cG9ydCB7IExpbmVzUGlwZSB9IGZyb20gXCIuL2xpbmVzXCI7XG5leHBvcnQgeyBVbmRlcnNjb3JlUGlwZSB9IGZyb20gXCIuL3VuZGVyc2NvcmVcIjtcbmV4cG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gXCIuL21hdGNoXCI7XG5leHBvcnQgeyBUZXN0UGlwZSB9IGZyb20gXCIuL3Rlc3RcIjtcbmV4cG9ydCB7IExlZnRQYWRQaXBlIH0gZnJvbSBcIi4vbHBhZFwiO1xuZXhwb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSBcIi4vcnBhZFwiO1xuZXhwb3J0IHsgTWFrZVBsdXJhbFN0cmluZ1BpcGUgfSBmcm9tIFwiLi9wbHVyYWxpemVcIjtcbmV4cG9ydCB7IFdyYXBQaXBlIH0gZnJvbSBcIi4vd3JhcFwiO1xuIl19