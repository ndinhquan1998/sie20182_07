/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from "@angular/core";
import { extractDeepPropertyByMapKey, extractDeepPropertyByParentMapKey, isBoolean, isNumberFinite, isString, isUndefined, } from "../helpers/helpers";
var FilterByPipe = /** @class */ (function () {
    function FilterByPipe() {
    }
    /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    FilterByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    function (input, props, search, strict) {
        if (search === void 0) { search = ""; }
        if (strict === void 0) { strict = false; }
        if (!Array.isArray(input) ||
            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        var /** @type {?} */ terms = String(search)
            .toLowerCase()
            .split(",");
        return input.filter(function (obj) {
            return props.some(function (prop) {
                return terms.some(function (term) {
                    var /** @type {?} */ value = extractDeepPropertyByMapKey(obj, prop);
                    var _a = extractDeepPropertyByParentMapKey(obj, prop), props = _a.props, tail = _a.tail;
                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                        return props.some(function (parent) {
                            var /** @type {?} */ str = String(parent[tail]).toLowerCase();
                            return strict ? str === term : !!~str.indexOf(term);
                        });
                    }
                    if (isUndefined(value)) {
                        return false;
                    }
                    var /** @type {?} */ strValue = String(value).toLowerCase();
                    return strict ? term === strValue : !!~strValue.indexOf(term);
                });
            });
        });
    };
    FilterByPipe.decorators = [
        { type: Pipe, args: [{ name: "filterBy" },] },
    ];
    return FilterByPipe;
}());
export { FilterByPipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL3BpcGVzL2FycmF5L2ZpbHRlci1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUNMLDJCQUEyQixFQUMzQixpQ0FBaUMsRUFDakMsU0FBUyxFQUNULGNBQWMsRUFDZCxRQUFRLEVBQ1IsV0FBVyxHQUNaLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7Ozs7O0lBTzFCLGdDQUFTOzs7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsS0FBb0IsRUFBRSxNQUFnQixFQUFFLE1BQXVCO1FBQXpDLHVCQUFBLEVBQUEsV0FBZ0I7UUFBRSx1QkFBQSxFQUFBLGNBQXVCO1FBQ25GLEVBQUUsQ0FBQyxDQUNELENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQy9GLENBQUMsQ0FBQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNkO1FBRUQscUJBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDekIsV0FBVyxFQUFFO2FBQ2IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWQsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSTtnQkFDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO29CQUNwQixxQkFBTSxLQUFLLEdBQUcsMkJBQTJCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUNyRCx1REFBUSxnQkFBSyxFQUFFLGNBQUksQ0FBa0Q7b0JBRXJFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDdEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNOzRCQUN0QixxQkFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDOzRCQUUvQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUNyRCxDQUFDLENBQUM7cUJBQ0o7b0JBRUQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDdkIsTUFBTSxDQUFDLEtBQUssQ0FBQztxQkFDZDtvQkFFRCxxQkFBTSxRQUFRLEdBQVcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO29CQUVyRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMvRCxDQUFDLENBQUM7YUFDSixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7S0FDSjs7Z0JBeENGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7O3VCQVgxQjs7U0FZYSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1xuICBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksXG4gIGV4dHJhY3REZWVwUHJvcGVydHlCeVBhcmVudE1hcEtleSxcbiAgaXNCb29sZWFuLFxuICBpc051bWJlckZpbml0ZSxcbiAgaXNTdHJpbmcsXG4gIGlzVW5kZWZpbmVkLFxufSBmcm9tIFwiLi4vaGVscGVycy9oZWxwZXJzXCI7XG5cbi8vIHRzbGludDpkaXNhYmxlIG5vLWJpdHdpc2VcbkBQaXBlKHsgbmFtZTogXCJmaWx0ZXJCeVwiIH0pXG5leHBvcnQgY2xhc3MgRmlsdGVyQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIHByb3BzOiBBcnJheTxzdHJpbmc+LCBzZWFyY2g/OiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoPzogYW55LCBzdHJpY3Q/OiBib29sZWFuKTogVDtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHByb3BzOiBBcnJheTxzdHJpbmc+LCBzZWFyY2g6IGFueSA9IFwiXCIsIHN0cmljdDogYm9vbGVhbiA9IGZhbHNlKTogYW55IHtcbiAgICBpZiAoXG4gICAgICAhQXJyYXkuaXNBcnJheShpbnB1dCkgfHxcbiAgICAgICghQXJyYXkuaXNBcnJheShzZWFyY2gpICYmICFpc1N0cmluZyhzZWFyY2gpICYmICFpc051bWJlckZpbml0ZShzZWFyY2gpICYmICFpc0Jvb2xlYW4oc2VhcmNoKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXJtcyA9IFN0cmluZyhzZWFyY2gpXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnNwbGl0KFwiLFwiKTtcblxuICAgIHJldHVybiBpbnB1dC5maWx0ZXIob2JqID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5zb21lKHByb3AgPT4ge1xuICAgICAgICByZXR1cm4gdGVybXMuc29tZSh0ZXJtID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShvYmosIHByb3ApO1xuICAgICAgICAgIGNvbnN0IHsgcHJvcHMsIHRhaWwgfSA9IGV4dHJhY3REZWVwUHJvcGVydHlCeVBhcmVudE1hcEtleShvYmosIHByb3ApO1xuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSAmJiAhaXNVbmRlZmluZWQocHJvcHMpICYmIEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHMuc29tZShwYXJlbnQgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdHIgPSBTdHJpbmcocGFyZW50W3RhaWxdKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgPyBzdHIgPT09IHRlcm0gOiAhIX5zdHIuaW5kZXhPZih0ZXJtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdHJWYWx1ZTogc3RyaW5nID0gU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIHN0cmljdCA/IHRlcm0gPT09IHN0clZhbHVlIDogISF+c3RyVmFsdWUuaW5kZXhPZih0ZXJtKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19